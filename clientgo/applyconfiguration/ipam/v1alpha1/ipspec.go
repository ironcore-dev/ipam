// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	ipamv1alpha1 "github.com/ironcore-dev/ipam/api/ipam/v1alpha1"
	v1 "k8s.io/api/core/v1"
)

// IPSpecApplyConfiguration represents an declarative configuration of the IPSpec type for use
// with apply.
type IPSpecApplyConfiguration struct {
	Subnet   *v1.LocalObjectReference             `json:"subnet,omitempty"`
	Consumer *ResourceReferenceApplyConfiguration `json:"consumer,omitempty"`
	IP       *ipamv1alpha1.IPAddr                 `json:"ip,omitempty"`
}

// IPSpecApplyConfiguration constructs an declarative configuration of the IPSpec type for use with
// apply.
func IPSpec() *IPSpecApplyConfiguration {
	return &IPSpecApplyConfiguration{}
}

// WithSubnet sets the Subnet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subnet field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithSubnet(value v1.LocalObjectReference) *IPSpecApplyConfiguration {
	b.Subnet = &value
	return b
}

// WithConsumer sets the Consumer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Consumer field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithConsumer(value *ResourceReferenceApplyConfiguration) *IPSpecApplyConfiguration {
	b.Consumer = value
	return b
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithIP(value ipamv1alpha1.IPAddr) *IPSpecApplyConfiguration {
	b.IP = &value
	return b
}
