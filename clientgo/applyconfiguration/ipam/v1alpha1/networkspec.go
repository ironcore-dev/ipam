// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/ipam/api/ipam/v1alpha1"
)

// NetworkSpecApplyConfiguration represents an declarative configuration of the NetworkSpec type for use
// with apply.
type NetworkSpecApplyConfiguration struct {
	ID          *v1alpha1.NetworkID   `json:"id,omitempty"`
	Type        *v1alpha1.NetworkType `json:"type,omitempty"`
	Description *string               `json:"description,omitempty"`
}

// NetworkSpecApplyConfiguration constructs an declarative configuration of the NetworkSpec type for use with
// apply.
func NetworkSpec() *NetworkSpecApplyConfiguration {
	return &NetworkSpecApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *NetworkSpecApplyConfiguration) WithID(value v1alpha1.NetworkID) *NetworkSpecApplyConfiguration {
	b.ID = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *NetworkSpecApplyConfiguration) WithType(value v1alpha1.NetworkType) *NetworkSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *NetworkSpecApplyConfiguration) WithDescription(value string) *NetworkSpecApplyConfiguration {
	b.Description = &value
	return b
}
