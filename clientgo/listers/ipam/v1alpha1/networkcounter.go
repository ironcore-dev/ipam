// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/ipam/api/ipam/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkCounterLister helps list NetworkCounters.
// All objects returned here must be treated as read-only.
type NetworkCounterLister interface {
	// List lists all NetworkCounters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkCounter, err error)
	// NetworkCounters returns an object that can list and get NetworkCounters.
	NetworkCounters(namespace string) NetworkCounterNamespaceLister
	NetworkCounterListerExpansion
}

// networkCounterLister implements the NetworkCounterLister interface.
type networkCounterLister struct {
	indexer cache.Indexer
}

// NewNetworkCounterLister returns a new NetworkCounterLister.
func NewNetworkCounterLister(indexer cache.Indexer) NetworkCounterLister {
	return &networkCounterLister{indexer: indexer}
}

// List lists all NetworkCounters in the indexer.
func (s *networkCounterLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkCounter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkCounter))
	})
	return ret, err
}

// NetworkCounters returns an object that can list and get NetworkCounters.
func (s *networkCounterLister) NetworkCounters(namespace string) NetworkCounterNamespaceLister {
	return networkCounterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkCounterNamespaceLister helps list and get NetworkCounters.
// All objects returned here must be treated as read-only.
type NetworkCounterNamespaceLister interface {
	// List lists all NetworkCounters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkCounter, err error)
	// Get retrieves the NetworkCounter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkCounter, error)
	NetworkCounterNamespaceListerExpansion
}

// networkCounterNamespaceLister implements the NetworkCounterNamespaceLister
// interface.
type networkCounterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkCounters in the indexer for a given namespace.
func (s networkCounterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkCounter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkCounter))
	})
	return ret, err
}

// Get retrieves the NetworkCounter from the indexer for a given namespace and name.
func (s networkCounterNamespaceLister) Get(name string) (*v1alpha1.NetworkCounter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkcounter"), name)
	}
	return obj.(*v1alpha1.NetworkCounter), nil
}
